# Design Decisions:
# 
# Disambiguated property names: albumTitle vs title, genreName vs name to avoid conflicts
# Union domains: owl:unionOf for properties like hasGenre and hasWonAward that apply to multiple classes
# Separate release properties: Distinguish releasedByArtist and releasedByLabel since the two "releasedBy" relationships have different semantics
# Comprehensive inverse properties: Additional inverse relationships for bidirectional navigation

@prefix : <http://example.org/music#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix str: <http://www.w3.org/2000/10/swap/string#> .

# Ontology Declaration
<http://example.org/music> a owl:Ontology ;
    rdfs:label "Music Ontology" ;
    rdfs:comment "An ontology for representing songs, artists, albums, record labels, genres, and awards in the music industry" .

# ===== CLASS DEFINITIONS =====

:Song a owl:Class ;
    rdfs:label "Song" ;
    rdfs:comment "A musical composition" .

:Artist a owl:Class ;
    rdfs:label "Artist" ;
    rdfs:comment "A person or group who creates or performs music" .

:Album a owl:Class ;
    rdfs:label "Album" ;
    rdfs:comment "A collection of songs released together" .

:RecordLabel a owl:Class ;
    rdfs:label "Record Label" ;
    rdfs:comment "A company that manages the production, distribution, and promotion of music" .

:Genre a owl:Class ;
    rdfs:label "Genre" ;
    rdfs:comment "A category or style of music" .

:Award a owl:Class ;
    rdfs:label "Award" ;
    rdfs:comment "A recognition given for musical achievement" .

:Single a owl:Class ;
    rdfs:subClassOf :Song ;
    rdfs:label "Single" ;
    rdfs:comment "A song released as a standalone track or as a primary track from an album" .

:ExtendedPlay a owl:Class ;
    rdfs:subClassOf :Album ;
    rdfs:label "Extended Play" ;
    rdfs:comment "A musical recording that contains more music than a single but is shorter than an album" .

# ===== ADDITIONAL INFERRED CLASSES =====
# These classes emerge from reasoning rules below - not explicitly asserted

:CollaborativeSong a owl:Class ;
    rdfs:subClassOf :Song ;
    rdfs:label "Collaborative Song" ;
    rdfs:comment "A song performed by multiple artists" .

:SuccessfulLabel a owl:Class ;
    rdfs:subClassOf :RecordLabel ;
    rdfs:label "Successful Label" ;
    rdfs:comment "A record label with multiple award-winning artists" .

:EstablishedArtist a owl:Class ;
    rdfs:subClassOf :Artist ;
    rdfs:label "Established Artist" ;
    rdfs:comment "An artist with multiple albums and awards" .

# ===== DATA PROPERTIES =====

:title a owl:DatatypeProperty ;
    rdfs:label "title" ;
    rdfs:comment "The title of a song" ;
    rdfs:domain :Song ;
    rdfs:range xsd:string .

:duration a owl:DatatypeProperty ;
    rdfs:label "duration" ;
    rdfs:comment "The duration of a song in seconds" ;
    rdfs:domain :Song ;
    rdfs:range xsd:int .

:releaseDate a owl:DatatypeProperty ;
    rdfs:label "release date" ;
    rdfs:comment "The date when a song was released" ;
    rdfs:domain :Song ;
    rdfs:range xsd:date .

:name a owl:DatatypeProperty ;
    rdfs:label "name" ;
    rdfs:comment "The name of an artist" ;
    rdfs:domain :Artist ;
    rdfs:range xsd:string .

:birthDate a owl:DatatypeProperty ;
    rdfs:label "birth date" ;
    rdfs:comment "The birth date of an artist" ;
    rdfs:domain :Artist ;
    rdfs:range xsd:date .

:nationality a owl:DatatypeProperty ;
    rdfs:label "nationality" ;
    rdfs:comment "The nationality of an artist" ;
    rdfs:domain :Artist ;
    rdfs:range xsd:string .

:albumTitle a owl:DatatypeProperty ;
    rdfs:label "album title" ;
    rdfs:comment "The title of an album" ;
    rdfs:domain :Album ;
    rdfs:range xsd:string .

:releaseYear a owl:DatatypeProperty ;
    rdfs:label "release year" ;
    rdfs:comment "The year when an album was released" ;
    rdfs:domain :Album ;
    rdfs:range xsd:int .

:labelName a owl:DatatypeProperty ;
    rdfs:label "label name" ;
    rdfs:comment "The name of a record label" ;
    rdfs:domain :RecordLabel ;
    rdfs:range xsd:string .

:location a owl:DatatypeProperty ;
    rdfs:label "location" ;
    rdfs:comment "The location of a record label" ;
    rdfs:domain :RecordLabel ;
    rdfs:range xsd:string .

:genreName a owl:DatatypeProperty ;
    rdfs:label "genre name" ;
    rdfs:comment "The name of a genre" ;
    rdfs:domain :Genre ;
    rdfs:range xsd:string .

:description a owl:DatatypeProperty ;
    rdfs:label "description" ;
    rdfs:comment "A description of a genre" ;
    rdfs:domain :Genre ;
    rdfs:range xsd:string .

:awardName a owl:DatatypeProperty ;
    rdfs:label "award name" ;
    rdfs:comment "The name of an award" ;
    rdfs:domain :Award ;
    rdfs:range xsd:string .

:year a owl:DatatypeProperty ;
    rdfs:label "year" ;
    rdfs:comment "The year an award was given" ;
    rdfs:domain :Award ;
    rdfs:range xsd:int .

:awardingBody a owl:DatatypeProperty ;
    rdfs:label "awarding body" ;
    rdfs:comment "The organization that gives the award" ;
    rdfs:domain :Award ;
    rdfs:range xsd:string .

:isStandalone a owl:DatatypeProperty ;
    rdfs:label "is standalone" ;
    rdfs:comment "Whether a single is released independently or as part of an album" ;
    rdfs:domain :Single ;
    rdfs:range xsd:boolean .

:numberOfTracks a owl:DatatypeProperty ;
    rdfs:label "number of tracks" ;
    rdfs:comment "The number of tracks in an extended play" ;
    rdfs:domain :ExtendedPlay ;
    rdfs:range xsd:int .

# ===== ADDITIONAL INFERRED DATA PROPERTIES =====

:collaborationStrength a owl:DatatypeProperty ;
    rdfs:label "collaboration strength" ;
    rdfs:comment "Numeric measure of how often two artists collaborate" ;
    rdfs:range xsd:int .

:popularityScore a owl:DatatypeProperty ;
    rdfs:label "popularity score" ;
    rdfs:comment "Calculated popularity metric based on awards and collaborations" ;
    rdfs:range xsd:int .

:labelSuccessRating a owl:DatatypeProperty ;
    rdfs:label "label success rating" ;
    rdfs:comment "Success metric for record labels based on artist achievements" ;
    rdfs:range xsd:int .

# ===== OBJECT PROPERTIES =====

:performedBy a owl:ObjectProperty ;
    rdfs:label "performed by" ;
    rdfs:comment "Relates a song to the artist(s) who perform it" ;
    rdfs:domain :Song ;
    rdfs:range :Artist .

:featuredOn a owl:ObjectProperty ;
    rdfs:label "featured on" ;
    rdfs:comment "Relates a song to the album(s) it appears on" ;
    rdfs:domain :Song ;
    rdfs:range :Album .

:hasGenre a owl:ObjectProperty ;
    rdfs:label "has genre" ;
    rdfs:comment "Relates a song or album to its genre(s)" ;
    rdfs:domain [ a owl:Class ; owl:unionOf ( :Song :Album ) ] ;
    rdfs:range :Genre .

:hasWonAward a owl:ObjectProperty ;
    rdfs:label "has won award" ;
    rdfs:comment "Relates a song or artist to awards they have won" ;
    rdfs:domain [ a owl:Class ; owl:unionOf ( :Song :Artist ) ] ;
    rdfs:range :Award .

:signedTo a owl:ObjectProperty ;
    rdfs:label "signed to" ;
    rdfs:comment "Relates an artist to the record label they are signed to" ;
    rdfs:domain :Artist ;
    rdfs:range :RecordLabel .

:releasedByArtist a owl:ObjectProperty ;
    rdfs:label "released by artist" ;
    rdfs:comment "Relates an album to the artist(s) who released it" ;
    rdfs:domain :Album ;
    rdfs:range :Artist .

:releasedByLabel a owl:ObjectProperty ;
    rdfs:label "released by label" ;
    rdfs:comment "Relates an album to the record label that released it" ;
    rdfs:domain :Album ;
    rdfs:range :RecordLabel .

# ===== ADDITIONAL INFERRED OBJECT PROPERTIES =====

:collaboratesWith a owl:ObjectProperty ;
    rdfs:label "collaborates with" ;
    rdfs:comment "Relates artists who have performed songs together" ;
    rdfs:domain :Artist ;
    rdfs:range :Artist ;
    a owl:SymmetricProperty .

:influencedBy a owl:ObjectProperty ;
    rdfs:label "influenced by" ;
    rdfs:comment "Relates artists through genre and collaboration networks" ;
    rdfs:domain :Artist ;
    rdfs:range :Artist ;
    a owl:TransitiveProperty .

:isContributor a owl:ObjectProperty ;
    rdfs:label "is contributor" ;
    rdfs:comment "Relates an entity to albums they contributed to" ;
    rdfs:range :Album .

# ===== CARDINALITY CONSTRAINTS =====

:Song rdfs:subClassOf [
    a owl:Restriction ;
    owl:onProperty :performedBy ;
    owl:minCardinality "1"^^xsd:nonNegativeInteger
] .

:Song rdfs:subClassOf [
    a owl:Restriction ;
    owl:onProperty :hasGenre ;
    owl:minCardinality "1"^^xsd:nonNegativeInteger
] .

:Album rdfs:subClassOf [
    a owl:Restriction ;
    owl:onProperty :hasGenre ;
    owl:minCardinality "1"^^xsd:nonNegativeInteger
] .

:Album rdfs:subClassOf [
    a owl:Restriction ;
    owl:onProperty :releasedByArtist ;
    owl:minCardinality "1"^^xsd:nonNegativeInteger
] .

:Album rdfs:subClassOf [
    a owl:Restriction ;
    owl:onProperty :releasedByLabel ;
    owl:cardinality "1"^^xsd:nonNegativeInteger
] .

:Artist rdfs:subClassOf [
    a owl:Restriction ;
    owl:onProperty :signedTo ;
    owl:maxCardinality "1"^^xsd:nonNegativeInteger
] .

# ===== INVERSE PROPERTIES =====

:performs a owl:ObjectProperty ;
    rdfs:label "performs" ;
    rdfs:comment "Relates an artist to songs they perform" ;
    owl:inverseOf :performedBy ;
    rdfs:domain :Artist ;
    rdfs:range :Song .

:features a owl:ObjectProperty ;
    rdfs:label "features" ;
    rdfs:comment "Relates an album to songs it features" ;
    owl:inverseOf :featuredOn ;
    rdfs:domain :Album ;
    rdfs:range :Song .

:genreOf a owl:ObjectProperty ;
    rdfs:label "genre of" ;
    rdfs:comment "Relates a genre to songs or albums that belong to it" ;
    owl:inverseOf :hasGenre ;
    rdfs:domain :Genre ;
    rdfs:range [ a owl:Class ; owl:unionOf ( :Song :Album ) ] .

:awardWonBy a owl:ObjectProperty ;
    rdfs:label "award won by" ;
    rdfs:comment "Relates an award to the song or artist that won it" ;
    owl:inverseOf :hasWonAward ;
    rdfs:domain :Award ;
    rdfs:range [ a owl:Class ; owl:unionOf ( :Song :Artist ) ] .

:hasSignedArtist a owl:ObjectProperty ;
    rdfs:label "has signed artist" ;
    rdfs:comment "Relates a record label to artists signed to it" ;
    owl:inverseOf :signedTo ;
    rdfs:domain :RecordLabel ;
    rdfs:range :Artist .

:releases a owl:ObjectProperty ;
    rdfs:label "releases" ;
    rdfs:comment "Relates an artist to albums they have released" ;
    owl:inverseOf :releasedByArtist ;
    rdfs:domain :Artist ;
    rdfs:range :Album .

:publishedAlbum a owl:ObjectProperty ;
    rdfs:label "published album" ;
    rdfs:comment "Relates a record label to albums it has published" ;
    owl:inverseOf :releasedByLabel ;
    rdfs:domain :RecordLabel ;
    rdfs:range :Album .

# ===== N3 REASONING RULES =====
# This section demonstrates N3's reasoning capabilities beyond basic OWL.
# N3 uses => for implication rules, allowing complex logical inference.
# Unlike relational databases which store facts, ontologies derive new facts through reasoning.

# COLLABORATION DETECTION RULE
# If two different artists perform the same song, they collaborate.
# This rule creates implicit relationships not explicitly stored.
# In a relational DB, you'd need explicit collaboration tables and queries.
# Here, the reasoner automatically infers collaborations from song performance data.
{
    ?song :performedBy ?artist1 .
    ?song :performedBy ?artist2 .
    ?artist1 log:notEqualTo ?artist2 .
} => {
    ?artist1 :collaboratesWith ?artist2 .
    ?song a :CollaborativeSong .
} .

# GENRE INHERITANCE RULE
# Albums inherit genres from their constituent songs when there's consensus.
# This shows how ontologies can propagate properties through hierarchies.
# Unlike flat files where you'd duplicate genre data, ontologies infer it.
# The reasoner aggregates song-level data to album-level insights.
{
    ?album :features ?song1 .
    ?album :features ?song2 .
    ?song1 :hasGenre ?genre .
    ?song2 :hasGenre ?genre .
    ?song1 log:notEqualTo ?song2 .
} => {
    ?album :hasGenre ?genre .
} .

# LABEL SUCCESS INFERENCE RULE
# Labels with multiple award-winning artists are classified as successful.
# This demonstrates how ontologies can automatically categorize entities.
# The rule counts relationships and applies business logic through reasoning.
# Traditional databases require explicit queries; here it's automatic.
{
    ?label :hasSignedArtist ?artist1 .
    ?label :hasSignedArtist ?artist2 .
    ?artist1 :hasWonAward ?award1 .
    ?artist2 :hasWonAward ?award2 .
    ?artist1 log:notEqualTo ?artist2 .
    ?award1 log:notEqualTo ?award2 .
} => {
    ?label a :SuccessfulLabel .
} .

# ARTIST ESTABLISHMENT RULE
# Artists with multiple albums and awards are established.
# Shows how ontologies can model career progression automatically.
# The open-world assumption means we don't need to explicitly state who isn't established.
# This differs from databases where NULL values require special handling.
{
    ?artist :releases ?album1 .
    ?artist :releases ?album2 .
    ?artist :hasWonAward ?award .
    ?album1 log:notEqualTo ?album2 .
} => {
    ?artist a :EstablishedArtist .
} .

# TRANSITIVITY RULE FOR INFLUENCE
# If Artist A influences B and B influences C, then A influences C.
# Demonstrates transitive reasoning - impossible in basic relational systems.
# N3's built-in support for transitivity creates infinite chains of inference.
# This models how musical influence spreads through networks.
{
    ?artist1 :influencedBy ?artist2 .
    ?artist2 :influencedBy ?artist3 .
} => {
    ?artist1 :influencedBy ?artist3 .
} .

# GENRE-BASED INFLUENCE RULE
# Artists sharing genres and collaborating are mutually influential.
# This creates bidirectional influence relationships from unidirectional data.
# Shows how ontologies can model complex domain relationships automatically.
{
    ?artist1 :collaboratesWith ?artist2 .
    ?artist1 :performs ?song1 .
    ?artist2 :performs ?song2 .
    ?song1 :hasGenre ?genre .
    ?song2 :hasGenre ?genre .
} => {
    ?artist1 :influencedBy ?artist2 .
    ?artist2 :influencedBy ?artist1 .
} .

# CONTRIBUTION INFERENCE RULE
# Any entity (artist, label) connected to an album is a contributor.
# Uses N3's ability to handle multiple domains for properties.
# This creates a unified view of album contributors regardless of their role.
{
    ?album :releasedByArtist ?contributor .
} => {
    ?contributor :isContributor ?album .
} .

{
    ?album :releasedByLabel ?contributor .
} => {
    ?contributor :isContributor ?album .
} .

# NUMERIC REASONING RULES
# These rules demonstrate N3's mathematical capabilities.
# Unlike SQL's procedural approach, these are declarative constraints.

# COLLABORATION STRENGTH CALCULATION
# Count how many songs two artists have performed together.
# N3's math: namespace enables numeric operations during reasoning.
# This creates quantified relationship measures from qualitative data.
{
    ?artist1 :collaboratesWith ?artist2 .
    ( ?song { ?song :performedBy ?artist1 . ?song :performedBy ?artist2 . } ) log:collectAllIn ?songs .
    ?songs log:length ?strength .
} => {
    ?artist1 :collaborationStrength ?strength .
} .

# POPULARITY SCORE CALCULATION  
# Combine award count and collaboration count for popularity metric.
# Shows how ontologies can synthesize multiple data sources into insights.
# The reasoner automatically maintains these scores as data changes.
{
    ?artist :hasWonAward ?award .
    ( ?collab { ?artist :collaboratesWith ?collab . } ) log:collectAllIn ?collabs .
    ( ?awardItem { ?artist :hasWonAward ?awardItem . } ) log:collectAllIn ?awards .
    ?collabs log:length ?collabCount .
    ?awards log:length ?awardCount .
    ( ?collabCount 2 ) math:product ?weightedCollabs .
    ( ?awardCount ?weightedCollabs ) math:sum ?popularity .
} => {
    ?artist :popularityScore ?popularity .
} .

# LABEL SUCCESS RATING
# Calculate success rating based on signed artists' achievements.
# Demonstrates aggregation across multiple entities through reasoning.
{
    ?label a :RecordLabel .
    ( ?score { ?label :hasSignedArtist ?artist . ?artist :popularityScore ?score . } ) log:collectAllIn ?scores .
    ?scores math:sum ?totalScore .
} => {
    ?label :labelSuccessRating ?totalScore .
} .

# STRING PROCESSING RULES
# N3's string functions enable text analysis during reasoning.
# These rules show how semantic technologies can process natural language.

# GENRE SIMILARITY DETECTION
# Find genres with similar names using string matching.
# This could identify related genres like "Rock" and "Folk Rock".
{
    ?genre1 :genreName ?name1 .
    ?genre2 :genreName ?name2 .
    ?name1 str:contains ?name2 .
    ?genre1 log:notEqualTo ?genre2 .
} => {
    ?genre1 rdfs:seeAlso ?genre2 .
} .

# TEMPORAL REASONING RULES
# These rules show how ontologies can handle time-based logic.

# CONTEMPORARY ARTISTS RULE
# Artists releasing albums in the same decade are contemporaries.
# Shows temporal clustering through mathematical reasoning.
{
    ?artist1 :releases ?album1 .
    ?artist2 :releases ?album2 .
    ?album1 :releaseYear ?year1 .
    ?album2 :releaseYear ?year2 .
    ( ?year1 10 ) math:quotient ?decade1 .
    ( ?year2 10 ) math:quotient ?decade2 .
    ?decade1 math:equalTo ?decade2 .
    ?artist1 log:notEqualTo ?artist2 .
} => {
    ?artist1 :contemporaryOf ?artist2 .
} .

# ===== ONTOLOGICAL FOUNDATIONS AND ASSUMPTIONS =====

# T-BOX (TERMINOLOGICAL BOX) - THE SCHEMA LAYER
# Everything above this comment represents the T-box: class definitions, 
# property definitions, cardinality constraints, and reasoning rules.
# The T-box defines the vocabulary and structure of the domain.
# It's the "schema" equivalent but much more expressive than database schemas.

# Classes like :Song, :Artist are T-box elements
# Properties like :performedBy, :hasGenre are T-box elements  
# Cardinality restrictions like "Album must have exactly one label" are T-box elements
# Reasoning rules that define how to infer new relationships are T-box elements

# T-box is domain-independent structural knowledge that could apply to any music dataset.
# Think of it as the "laws of physics" for the music domain.

# A-BOX (ASSERTIONAL BOX) - THE INSTANCE DATA LAYER
# The A-box would contain actual instances of the classes defined in the T-box.
# A-box statements are facts about specific individuals in the domain.
# Example A-box data for this ontology:

# :BohemianRhapsody a :Song ;
#     :title "Bohemian Rhapsody" ;
#     :duration 355 ;
#     :performedBy :Queen ;
#     :featuredOn :ANightAtTheOpera ;
#     :hasGenre :ProgressiveRock .

# :Queen a :Artist ;
#     :name "Queen" ;
#     :nationality "British" ;
#     :signedTo :EMIRecords .

# :ANightAtTheOpera a :Album ;
#     :albumTitle "A Night at the Opera" ;
#     :releaseYear 1975 ;
#     :releasedByArtist :Queen ;
#     :releasedByLabel :EMIRecords .

# A-box facts are what get reasoned over using T-box rules.
# The reasoner combines T-box rules with A-box facts to derive new A-box facts.

# OPEN WORLD ASSUMPTION (OWA) vs CLOSED WORLD ASSUMPTION (CWA)

# CLOSED WORLD ASSUMPTION (Traditional Databases)
# If a fact is not explicitly stored, it is assumed to be false.
# Example: If database has no record of "John likes Jazz", then John doesn't like Jazz.
# This works for complete, controlled datasets where you know everything.
# SQL queries return definitive answers based on stored data only.

# OPEN WORLD ASSUMPTION (Ontologies/Semantic Web)
# If a fact is not explicitly stored, it could be true or false - we don't know.
# Example: If ontology has no statement about "John likes Jazz", it's unknown, not false.
# This enables integration of incomplete data from multiple sources.
# Reasoning can derive facts that weren't explicitly asserted.

# OWA EXAMPLE IN OUR MUSIC ONTOLOGY:
# If we don't have :performedBy statements for a song, we don't conclude no one performed it.
# We might later add performance data or infer it through reasoning rules.
# Contrast with database: missing performer = no performer (CWA).

# PRACTICAL OWA IMPLICATIONS:
# - Negation requires explicit statements (:artist1 :notCollaboratesWith :artist2)
# - Absence of evidence ≠ evidence of absence  
# - Data can be incrementally added without contradiction
# - Multiple partial views can be merged without conflict

# UNIQUE NAME ASSUMPTION (UNA)
# Databases assume different identifiers refer to different entities.
# Ontologies do NOT make this assumption by default.
# :JohnLennon and :J_Lennon could refer to the same person unless stated otherwise.
# Use owl:sameAs to explicitly state identity: :JohnLennon owl:sameAs :J_Lennon .
# Use owl:differentFrom to explicitly state difference: :JohnLennon owl:differentFrom :PaulMcCartney .

# NO UNIQUE NAME ASSUMPTION EXAMPLE:
# Our ontology could have:
# :TheBeatles :hasSignedArtist :JohnLennon .
# :BeatlesBand :hasSignedArtist :J_Lennon .
# Without UNA, reasoner doesn't assume these are different people.
# This enables entity resolution across different data sources.

# MONOTONICITY PRINCIPLE
# Adding new facts to an ontology never invalidates previously derived conclusions.
# Once reasoner concludes ":Queen :collaboratesWith :DavidBowie", this remains true
# even if we add more collaboration data.
# Contrast with databases where new data might change query results.
# Enables incremental reasoning and distributed knowledge building.

# NON-MONOTONIC REASONING (Advanced)
# Some real-world scenarios require retracting conclusions when new info arrives.
# Default logic: "Artists are typically human unless stated otherwise"
# If we later learn an artist is an AI, we retract the "human" conclusion.
# Standard OWL/N3 doesn't support this - requires specialized reasoners.

# REASONING TYPES AND COMPUTATIONAL COMPLEXITY

# FORWARD CHAINING (DATA-DRIVEN REASONING)
# Apply all rules to all facts until no new facts can be derived.
# Pre-computes all possible conclusions - good for query performance.
# Can be expensive upfront, especially with complex rule sets.
# Our collaboration rules would fire whenever song performance data is added.

# BACKWARD CHAINING (GOAL-DRIVEN REASONING)  
# Start with a query and work backwards to see if it can be proven.
# Only derives facts needed to answer specific questions.
# Better for exploratory queries on large datasets.
# Query "Who collaborates with Queen?" triggers only relevant rules.

# DESCRIPTION LOGIC FOUNDATION
# OWL is based on Description Logic (DL) - a subset of first-order logic.
# DL ensures decidability - reasoning will terminate with definitive answers.
# N3 rules extend beyond DL into full first-order logic.
# This gains expressiveness but loses guaranteed termination.

# DECIDABILITY TRADE-OFFS IN OUR ONTOLOGY:
# Basic OWL constraints (cardinality, domain/range) are decidable.
# N3 rules with math operations might create infinite loops.
# Transitivity rules (:influencedBy) could create infinite chains.
# Practical systems use various techniques to control this.

# SEMANTIC INTEROPERABILITY THROUGH STANDARDS

# RDF TRIPLE MODEL
# All facts expressed as subject-predicate-object triples.
# :BohemianRhapsody :performedBy :Queen .
# Enables uniform representation regardless of data source.
# Multiple systems can exchange and merge triple data seamlessly.

# URI-BASED NAMING
# Global identifiers eliminate namespace conflicts.
# http://musicbrainz.org/artist/0383dadf-2a4e-4d10-a46a-e9e041da8eb3 (Queen)
# vs http://example.org/music#Queen  
# Systems can align these through owl:sameAs statements.

# VOCABULARY REUSE
# Our ontology could import standard vocabularies:
# FOAF (Friend of a Friend) for person data
# Dublin Core for metadata
# Music Ontology (existing standard) for music-specific terms
# This creates ecosystem interoperability.

# ONTOLOGICAL ADVANTAGES OVER RELATIONAL DATA

# SCHEMA FLEXIBILITY
# Adding new property to existing class doesn't require schema migration.
# New classes can be introduced without affecting existing data.
# Multiple inheritance allows rich taxonomies impossible in relational models.

# RELATIONSHIP COMPLEXITY  
# Many-to-many relationships are natural, not requiring junction tables.
# Relationship properties (when did artist sign to label?) are first-class.
# Recursive relationships (artist influences artist) work naturally.

# INFERENCE CAPABILITIES
# Business rules embedded in data model, not application code.
# Automatic consistency checking - reasoner detects contradictions.
# Question answering beyond what's explicitly stored.

# DISTRIBUTED KNOWLEDGE
# Data can be spread across multiple sources and reasoned over together.
# No single point of truth required - knowledge accumulates.
# Contradiction handling through provenance and confidence measures.

# N3 SPECIFIC FEATURES BEYOND OWL

# BUILT-IN FUNCTIONS
# Mathematical operations: math:sum, math:product, math:quotient
# String operations: str:contains, str:startsWith, str:matches  
# List operations: log:collectAllIn, log:length, log:memberAt
# Logical operations: log:notEqualTo, log:equalTo, log:implies

# QUOTED FORMULAS
# Can reason about statements themselves, not just their truth.
# { :artist1 :collaboratesWith :artist2 } log:implies { :artist2 :collaboratesWith :artist1 } .
# Enables meta-reasoning and belief systems.

# PROOF GENERATION
# N3 reasoners can explain how conclusions were reached.
# Crucial for trust and debugging in knowledge systems.
# Shows chain of reasoning from axioms to conclusions.

# PRACTICAL CONSIDERATIONS

# PERFORMANCE CHARACTERISTICS
# Reasoning complexity increases exponentially with rule interactions.
# Forward chaining can pre-compute expensive inferences.
# Incremental reasoning updates only affected conclusions.
# Materialization vs virtualization trade-offs.

# DATA QUALITY AND PROVENANCE  
# Open world assumption requires careful data curation.
# Conflicting information from multiple sources needs resolution.
# Provenance tracking shows where facts originated.
# Confidence scores can weight uncertain information.

# TOOLING ECOSYSTEM
# Protégé for ontology development and visualization.
# Apache Jena for Java-based reasoning and storage.
# cwm (N3 reasoner) for proof generation and explanation.
# SPARQL for querying RDF data with reasoning.

# ONTOLOGY DESIGN PATTERNS
# Composition over inheritance for flexible modeling.
# Reification for relationship metadata.
# Qualified cardinality for nuanced constraints.
# Modular design for maintainability and reuse.